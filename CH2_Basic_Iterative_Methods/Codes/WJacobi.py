# =========================================================================
# -------------------------------------------------------------------------
# Weighted Jacobi
# =========================================================================


def WJacobi(A, v0, b, omg, Niter):

    import numpy as np

    v1 = np.ones(len(v0))

    Ad = np.diag(A)
    Ap = A - np.diag(Ad)
    for i in range(1, Niter+1):
        v1 = (b - np.dot(Ap, v0)) / Ad
        v0 = (1.0 - omg) * v0 + omg * v1

    return v0[:]


# -------------------------------------------------------------------------
# =========================================================================
